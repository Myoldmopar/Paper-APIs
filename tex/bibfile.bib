% Encoding: UTF-8

@Article{Sardoueinasab2020,
  author    = {Zahra Sardoueinasab and Peng Yin and Dennis O’Neal},
  journal   = {Journal of Building Performance Simulation},
  title     = {Energy modeling and analysis of variable airflow parallel fan-powered terminal units using Energy Management System (EMS) in EnergyPlus},
  year      = {2020},
  number    = {1},
  pages     = {1-12},
  volume    = {13},
  abstract  = {The prevalence of variable airflow (VA) parallel fan-powered terminal units (FPTUs) points to the need of developing a performance model for building energy simulation. However, current version of EnergyPlus does not allow modelling variable speed fans in FPTUs using existing standard modules. This paper provided an alternative approach to modelling VA parallel FPTUs in EnergyPlus using Energy Management System (EMS) and user-defined modules to demonstrate the feasibility of integrating the model of VA parallel FPTUs with the rest of HVAC system. Also, the effect of constant airflow (CA) and VA parallel FPTUs on the component and system energy consumption was investigated based on the energy simulation results conducted on a single-story, five-zone small office prototype building model. The results showed that although VA parallel FPTUs have great potential in saving terminal unit fan energy, the selection of VA units over CA units alone does not guarantee net energy savings.},
  doi       = {10.1080/19401493.2019.1679260},
  publisher = {Taylor & Francis},
}

@Proceedings{Pang2011,
  title    = {Real-time Building Energy Simulation using EnergyPlus and the Building Controls Virtual Test Bed},
  year     = {2011},
  address  = {Sydney, Australia},
  month    = {11/2011},
  abstract = {<p>Most commercial buildings do not perform as well in practice as intended by the design and their performances often deteriorate over time. Reasons include faulty construction, malfunctioning equipment, incorrectly configured control systems and inappropriate operating procedures (Haves et al., 2001, Lee et al., 2007). To address this problem, the paper presents a simulation-based whole building performance monitoring tool that allows a comparison of building actual performance and expected performance in real time. The tool continuously acquires relevant building model input variables from existing Energy Management and Control System (EMCS). It then reports expected energy consumption as simulated of EnergyPlus. The Building Control Virtual Test Bed (BCVTB) is used as the software platform to provide data linkage between the EMCS, an EnergyPlus model, and a database. This paper describes the integrated real-time simulation environment. A proof-of-concept demonstration is also presented in the paper.</p>},
  author   = {Xiufeng Pang and Prajesh Bhattacharya and Zheng O{\textquoteright}Neill and Philip Haves and Michael Wetter and Trevor Bailey},
  journal  = {Proc. of the 12th IBPSA Conference},
  pages    = {p. 2890-2896},
}

@Article{Nouidui2014,
  author  = {Nouidui, Thierry and Wetter, Michael and Zuo, Wangda},
  journal = {Journal of Building Performance Simulation},
  title   = {Functional mock-up unit for co-simulation import in EnergyPlus},
  year    = {2014},
  month   = {05},
  volume  = {7},
  doi     = {10.1080/19401493.2013.808265},
}

@Article{Sardoueinasab2019,
  author   = {Sardoueinasab, Zahra and Yin, Peng and O'Neal, Dennis},
  journal  = {ASHRAE Transactions},
  title    = {Air Leakage Analysis in Parallel Fan-Powered Terminal Units Using EnergyPlus},
  year     = {2019},
  issn     = {00012505},
  number   = {2},
  pages    = {52+},
  volume   = {125},
  database = {Gale Academic OneFile},
  keywords = {Energy consumption, Commercial real estate, Energy conservation, United States. Pacific Northwest National Laboratory},
  language = {English},
}

@Article{Dutton2012,
  author   = {Spencer Dutton and Hui Zhang and Yongchao Zhai and Ed Arens and Youness Bennani Smires and Sam Brunswick and Kyle Konis and Phil Haves},
  journal  = {Proceedings of SimBuild},
  title    = {APPLICATION OF A STOCHASTIC WINDOW USE MODEL IN ENERGYPLUS},
  year     = {2012},
  number   = {1},
  pages    = {63--70},
  volume   = {5},
  abstract = {Natural ventilation, used appropriately, has the potential to provide both significant HVAC energy savings, and improvements in occupant satisfaction. Central to the development of natural ventilation models is the need to accurately represent the behavior of building occupants. The work covered in this paper describes a method of implementing a stochastic window model in EnergyPlus. Simulated window use data from three stochastic window opening models was then compared to measured window opening behavior, collected in a naturally-ventilated office in California. Recommendations regarding the selection of stochastic window use models, and their implementation in EnergyPlus, are presented.},
  url      = {http://ibpsa-usa.org/index.php/ibpusa/article/view/416},
}

@Article{Jones2013,
  author  = {Jones, A.T. and Finn, D.P.},
  journal = {Proceedings of BS 2013: 13th Conference of the International Building Performance Simulation Association},
  title   = {Ground source heat pump modelling with thermal storage - Simulation and integration issues in energyplijs},
  year    = {2013},
  month   = {01},
  pages   = {2916-2923},
}

@Article{Oezturan2015,
  author    = {Özturan, Can and Morris, Karla},
  journal   = {Scientific Programming},
  title     = {Emulating Multiple Inheritance in Fortran 2003/2008},
  year      = {2015},
  issn      = {1058-9244},
  pages     = {126069},
  volume    = {2015},
  abstract  = {Although the high-performance computing (HPC) community increasingly embraces object-oriented programming (OOP), most HPC OOP projects employ the C++ programming language. Until recently, Fortran programmers interested in mining the benefits of OOP had to emulate OOP in Fortran 90/95. The advent of widespread compiler support for Fortran 2003 now facilitates explicitly constructing object-oriented class hierarchies via inheritance and leveraging related class behaviors such as dynamic polymorphism. Although C++ allows a class to inherit from multiple parent classes, Fortran and several other OOP languages restrict or prohibit explicit multiple inheritance relationships in order to circumvent several pitfalls associated with them. Nonetheless, what appears as an intrinsic feature in one language can be modeled as a user-constructed design pattern in another language. The present paper demonstrates how to apply the facade structural design pattern to support a multiple inheritance class relationshipin Fortran 2003. The design unleashes the power of the associated class relationships for modeling complicated data structures yet avoids the ambiguities that plague some multiple inheritance scenarios.},
  doi       = {10.1155/2015/126069},
  publisher = {Hindawi Publishing Corporation},
  url       = {https://doi.org/10.1155/2015/126069},
}

@Article{Crawley2001,
  author  = {Crawley, Drury and Lawrie, Linda and Winkelmann, Frederick and Buhl, W.F. and Huang, Y.Joe and Pedersen, Curtis and Strand, Richard and Liesen, Richard and Fisher, Daniel and Witte, Michael and Glazer, Jason},
  journal = {Energy and Buildings},
  title   = {EnergyPlus: Creating a New-Generation Building Energy Simulation Program},
  year    = {2001},
  month   = {04},
  pages   = {319-331},
  volume  = {33},
  doi     = {10.1016/S0378-7788(00)00114-6},
}

@Article{Campos2020,
  author  = {Campos, Germán and Ramos, Germán and Stauffer, Yves and Dasen, Stephan and Fernandez Bandera, Carlos},
  journal = {Sustainability},
  title   = {EplusLauncher: An API to Perform Complex EnergyPlus Simulations in MATLAB® and C\#},
  year    = {2020},
  month   = {01},
  pages   = {672},
  volume  = {12},
  doi     = {10.3390/su12020672},
}

@Unknown{Mohanan2018,
  author = {Mohanan, Ashwin Vishnu and Bonamy, Cyrille and Augier, Pierre},
  month  = {07},
  title  = {FluidFFT: common API (C++ and Python) for Fast Fourier Transform HPC libraries},
  year   = {2018},
}

@Book{Stroustrup1995,
  author    = {Stroustrup, Bjarne},
  publisher = {Second edition, reprinted with corrections August, 1995. Reading, Mass. : Addison-Wesley, 1995. ©1991},
  title     = {The C++ programming language},
  year      = {1995},
  abstract  = {xi, 699 pages ; 24 cm},
  comment   = {Includes bibliographical references (pages 11-12) and index.},
  groups    = {[edwin:]},
  refid     = {999786409402121},
  url       = {https://search.library.wisc.edu/catalog/999786409402121},
}

@Manual{Rossum,
  title       = {Python Language Reference, available at http://python.org},
  author      = {Python Software Foundation},
  groups      = {edwin:6},
  institution = {Available at http://python.org},
}

@Article{Mao2018,
  author    = {Chunliu Mao and Juan-Carlos Baltazar and Jeff S. Haberl},
  journal   = {Science and Technology for the Built Environment},
  title     = {Literature review of building peak cooling load methods in the United States},
  year      = {2018},
  number    = {3},
  pages     = {228-237},
  volume    = {24},
  abstract  = {Today, sizing HVAC systems plays an important role in the building design process, requiring an accurate method in order to avoid problems from over- or under-sized systems. To date, there have been five peak cooling load methods published by ASHRAE, including: the Total Equivalent Temperature Difference/Time Averaging Method, the Transfer Function Method, the Cooling Load Temperature Difference/Solar Cooling Load/Cooling Load Factor Method, the Heat Balance Method, and the Radiant Time Series Method. This study provides a thorough review of the five methods with respect to their history and summarizes the method differences that can lead to inaccurate sensible cooling load calculations.},
  doi       = {10.1080/23744731.2017.1373700},
  eprint    = {https://doi.org/10.1080/23744731.2017.1373700},
  publisher = {Taylor & Francis},
  url       = {https://doi.org/10.1080/23744731.2017.1373700},
}

@InProceedings{Ellis2007,
  author  = {Ellis, Peter and Torcellini, Paul and Crawley, Drury},
  title   = {Simulation of Energy Management Systems in EnergyPlus},
  year    = {2007},
  month   = {09},
  pages   = {1346-1353},
  journal = {Proceedings of Building Simulation 2007},
}

@Book{Adams1997,
  author    = {Adams, Jeanne C. and Smith, Brian T. and Martin, Jeanne T. and Brainerd, Walter S. and Wagener, Jerrold L.},
  publisher = {MIT Press},
  title     = {FORTRAN 95 Handbook},
  year      = {1997},
  address   = {Cambridge, MA, USA},
  edition   = {1st},
  isbn      = {0262510960},
  abstract  = {From the Publisher:The Fortran 95 Handbook, a comprehensive reference work for the Fortran Programmer and Implementor, contains a complete description of the Fortran 95 programming language. The chapters follow the same sequence of topics as the Fortran 95 standard, but contain a more thorough and informal explanation of the language's features and many more examples. Appendices describe all the intrinsic features, the deprecated features, and the complete syntax of the language. In addition to an unusually thorough topical index, there is an index of examples. Major new features added in Fortran 95 are the FORALL statement and construct, pure and elemental procedures, and structure and pointer default initialization.},
}

@Article{Guglielmetti2011,
  author       = {Guglielmetti, R and Macumber, D and Long, N},
  title        = {OpenStudio: An Open Source Integrated Analysis Platform; Preprint},
  year         = {2011},
  month        = {12},
  abstractnote = {High-performance buildings require an integrated design approach for all systems to work together optimally; systems integration needs to be incorporated in the earliest stages of design for efforts to be cost and energy-use effective. Building designers need a full-featured software framework to support rigorous, multidisciplinary building simulation. An open source framework - the OpenStudioSoftware Development Kit (SDK) - is being developed to address this need. In this paper, we discuss the needs that drive OpenStudio's system architecture and goals, provide a development status report (the SDK is currently in alpha release), and present a brief case study that illustrates its utility and flexibility.},
  place        = {United States},
  url          = {https://www.osti.gov/biblio/1032670},
}

@Misc{EPlus2017,
  month        = {9},
  title        = {EnergyPlus™, Version 00},
  year         = {2017},
  abstractnote = {Originally developed in 1999, an updated version 8.8.0 with bug fixes was released on September 30th, 2017. EnergyPlus™ is a whole building energy simulation program that engineers, architects, and researchers use to model both energy consumption—for heating, cooling, ventilation, lighting and plug and process loads—and water use in buildings. EnergyPlus is a console-based program that reads input and writes output to text files. It ships with a number of utilities including IDF-Editor for creating input files using a simple spreadsheet-like interface, EP-Launch for managing input and output files and performing batch simulations, and EP-Compare for graphically comparing the results of two or more simulations. Several comprehensive graphical interfaces for EnergyPlus are also available. DOE does most of its work with EnergyPlus using the OpenStudio® software development kit and suite of applications. DOE releases major updates to EnergyPlus twice annually.},
  url          = {https://www.osti.gov//servlets/purl/1395882},
}

@Article{Gratiy2018,
  author    = {Gratiy, Sergey L. AND Billeh, Yazan N. AND Dai, Kael AND Mitelut, Catalin AND Feng, David AND Gouwens, Nathan W. AND Cain, Nicholas AND Koch, Christof AND Anastassiou, Costas A. AND Arkhipov, Anton},
  journal   = {PLOS ONE},
  title     = {BioNet: A Python interface to NEURON for modeling large-scale networks},
  year      = {2018},
  month     = {08},
  number    = {8},
  pages     = {1-18},
  volume    = {13},
  abstract  = {There is a significant interest in the neuroscience community in the development of large-scale network models that would integrate diverse sets of experimental data to help elucidate mechanisms underlying neuronal activity and computations. Although powerful numerical simulators (e.g., NEURON, NEST) exist, data-driven large-scale modeling remains challenging due to difficulties involved in setting up and running network simulations. We developed a high-level application programming interface (API) in Python that facilitates building large-scale biophysically detailed networks and simulating them with NEURON on parallel computer architecture. This tool, termed “BioNet”, is designed to support a modular workflow whereby the description of a constructed model is saved as files that could be subsequently loaded for further refinement and/or simulation. The API supports both NEURON’s built-in as well as user-defined models of cells and synapses. It is capable of simulating a variety of observables directly supported by NEURON (e.g., spikes, membrane voltage, intracellular [Ca++]), as well as plugging in modules for computing additional observables (e.g. extracellular potential). The high-level API platform obviates the time-consuming development of custom code for implementing individual models, and enables easy model sharing via standardized files. This tool will help refocus neuroscientists on addressing outstanding scientific questions rather than developing narrow-purpose modeling code.},
  comment   = {https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0201630},
  doi       = {10.1371/journal.pone.0201630},
  publisher = {Public Library of Science},
  url       = {https://doi.org/10.1371/journal.pone.0201630},
}

@Article{Lotz2020,
  author                 = {Lotz, Samuel D. and Dickson, Alex},
  journal                = {ACS omega},
  title                  = {Wepy: A Flexible Software Framework for Simulating Rare Events with Weighted Ensemble Resampling.},
  year                   = {2020},
  month                  = {Dec},
  pages                  = {31608-31623},
  volume                 = {5},
  electronic-issn        = {2470-1343},
  linking-issn           = {2470-1343},
  abstract               = {Here, we introduce the open-source software framework wepy (https://github.com/ADicksonLab/wepy) which is a toolkit for running and analyzing weighted ensemble (WE) simulations. The wepy toolkit is in pure Python and as such is highly portable and extensible, making it an excellent platform to develop and use new WE resampling algorithms such as WExplore, REVO, and others while leveraging the entire Python ecosystem. In addition, wepy simplifies WE-specific analyses by defining out-of-core tree-like data structures using the cross-platform HDF5 file format. In this paper, we discuss the motivations and challenges for simulating rare events in biomolecular systems. As has previously been shown, high-dimensional WE resampling algorithms such as WExplore and REVO have been successful at these tasks, especially for rare events that are difficult to describe by one or two collective variables. We explain in detail how wepy facilitates implementation of these algorithms, as well as aids in analyzing the unique structure of WE simulation results. To explain how wepy and WE work in general, we describe the mathematical formalism of WE, an overview of the architecture of wepy, and provide code examples of how to construct, run, and analyze simulation results for a protein-ligand system (T4 Lysozyme in an implicit solvent). This paper is written with a variety of readers in mind, including (1) those curious about how to leverage WE rare-event simulations for their domain, (2) current WE users who want to begin using new high-dimensional resamplers such as WExplore and REVO, and (3) expert users who would like to prototype or implement their own algorithms that can be easily adopted by others.},
  article-doi            = {10.1021/acsomega.0c03892},
  electronic-publication = {20201202},
  grantno                = {R01 GM130794/GM/NIGMS NIH HHS/United States},
  history                = {2020/12/22 06:01 [medline]},
  issue                  = {49},
  language               = {eng},
  location-id            = {10.1021/acsomega.0c03892 [doi]},
  nlm-unique-id          = {101691658},
  owner                  = {NLM},
  publication-status     = {epublish},
  revised                = {20201223},
  source                 = {ACS Omega. 2020 Dec 2;5(49):31608-31623. doi: 10.1021/acsomega.0c03892. eCollection 2020 Dec 15.},
  status                 = {PubMed-not-MEDLINE},
  title-abbreviation     = {ACS Omega},
}

@Comment{jabref-meta: databaseType:bibtex;}

@Comment{jabref-meta: grouping:
0 AllEntriesGroup:;
1 StaticGroup:Markings\;2\;1\;\;\;\;;
2 StaticGroup:[edwin:]\;2\;1\;\;\;\;;
2 StaticGroup:edwin:6\;2\;1\;\;\;\;;
}
